# Generated by Django 4.2.5 on 2023-09-18 20:56

from django.db import migrations, models
import django.db.models.deletion
import django_enum.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(db_index=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('todo', models.TextField(blank=True, default='')),
                ('hints', models.TextField(blank=True, default='')),
                ('requirements', models.TextField(blank=True, default='')),
                ('test', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('started', models.DateTimeField(auto_now_add=True)),
                ('ended', models.DateTimeField(blank=True, default=None, null=True)),
            ],
            options={
                'ordering': ['-started'],
            },
        ),
        migrations.CreateModel(
            name='CourseRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(db_index=True, help_text='The Git repository URI. This may be a specific branch (i.e. tree/branch_name)', max_length=255, unique=True)),
                ('branch', models.CharField(max_length=64, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseRepositoryVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('git_hash', models.CharField(max_length=255)),
                ('git_branch', models.CharField(default='main', max_length=255)),
                ('commit_count', models.PositiveIntegerField(db_index=True, default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.courserepository')),
            ],
            options={
                'ordering': ['-commit_count'],
                'abstract': False,
                'unique_together': {('git_hash', 'git_branch')},
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=64)),
                ('number', models.PositiveSmallIntegerField(null=True)),
                ('topic', models.CharField(blank=True, default='', max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('added', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='modules_added', to='learn_python_server.courserepositoryversion')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
                ('removed', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modules_removed', to='learn_python_server.courserepositoryversion')),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.courserepository')),
            ],
            options={
                'ordering': ['number'],
                'unique_together': {('repository', 'number')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, null=True)),
                ('github', models.CharField(max_length=255, unique=True)),
                ('joined', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(db_index=True, help_text='The Git repository URI. This may be a specific branch (i.e. tree/branch_name)', max_length=255, unique=True)),
                ('branch', models.CharField(max_length=64, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repositories', to='learn_python_server.student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentRepositoryVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('git_hash', models.CharField(max_length=255)),
                ('git_branch', models.CharField(default='main', max_length=255)),
                ('commit_count', models.PositiveIntegerField(db_index=True, default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.studentrepository')),
            ],
            options={
                'ordering': ['-commit_count'],
                'abstract': False,
                'unique_together': {('git_hash', 'git_branch')},
            },
        ),
        migrations.CreateModel(
            name='TutorAPIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend', django_enum.fields.EnumCharField(choices=[('openai', 'OPEN_AI')], max_length=6)),
                ('secret', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TutorEngagement',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('start', models.DateTimeField(db_index=True)),
                ('end', models.DateTimeField()),
                ('log', models.FileField(blank=True, null=True, upload_to='')),
                ('backend', django_enum.fields.EnumCharField(choices=[('openai', 'OPEN_AI')], max_length=6)),
                ('backend_extra', models.JSONField(blank=True, null=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.studentrepositoryversion')),
            ],
            options={
                'ordering': ['-start'],
            },
        ),
        migrations.CreateModel(
            name='SpecialTopic',
            fields=[
                ('module_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='learn_python_server.module')),
                ('uri', models.URLField(max_length=255)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('learn_python_server.module',),
        ),
        migrations.CreateModel(
            name='TutorSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.PositiveSmallIntegerField(db_index=True)),
                ('start', models.DateTimeField(db_index=True)),
                ('end', models.DateTimeField()),
                ('assignment', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='learn_python_server.assignment')),
                ('engagement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.tutorengagement')),
            ],
            options={
                'ordering': ['start'],
                'unique_together': {('engagement', 'session_id')},
            },
        ),
        migrations.CreateModel(
            name='TutorExchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', django_enum.fields.EnumCharField(choices=[('system', 'SYSTEM'), ('tutor', 'TUTOR'), ('student', 'STUDENT')], max_length=7)),
                ('message', models.TextField(editable=False)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('backend_extra', models.JSONField(blank=True, null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.tutorsession')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.AddField(
            model_name='student',
            name='tutor_key',
            field=models.ForeignKey(blank=True, help_text='API key for the Tutor backend, specifically for this student - will override any associated class tutor key.', null=True, on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.tutorapikey'),
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(blank=True, editable=False, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.course')),
                ('repository', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.studentrepository')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.student')),
            ],
            options={
                'unique_together': {('student', 'repository'), ('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='DocBuild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='learn_python_server.courserepositoryversion')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='docs',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='learn_python_server.docbuild'),
        ),
        migrations.AddField(
            model_name='course',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='learn_python_server.courserepository'),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(related_name='courses', through='learn_python_server.Enrollment', to='learn_python_server.student'),
        ),
        migrations.AddField(
            model_name='course',
            name='tutor_key',
            field=models.ForeignKey(blank=True, help_text='API key for the Tutor backend, specifically for this course.', null=True, on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.tutorapikey'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='added',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assignments_added', to='learn_python_server.courserepositoryversion'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learn_python_server.module'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='removed',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assignments_removed', to='learn_python_server.courserepositoryversion'),
        ),
        migrations.AlterUniqueTogether(
            name='assignment',
            unique_together={('module', 'name')},
        ),
    ]
